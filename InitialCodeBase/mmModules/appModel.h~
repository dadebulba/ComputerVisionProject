#ifndef MMAPP_MODEL_H_
#define MMAPP_MODEL_H_

#include "mmBlob.h"

using namespace cv;

static const double pi = 3.14159265358979323846;

namespace mmLib{
	namespace mmModules{
		class appModel{
		public:
			appModel();
			appModel(double a, double l, double s, double th, int tfp);
			~appModel();

			void appFrame();

			mmBlob newAppModel(Mat frame, Mat foreground, mmBlob blob);
			mmBlob stdAppModel(Mat frame, Mat foreground, mmBlob blobNew, mmBlob blobOld);
			mmBlob mergeAppModel(Mat frame, Mat foreground, mmBlob blobNew, mmBlob blobOld);
			mmBlob nonMergeAppModel(Mat frame, Mat foreground, mmBlob blobNew, vector<mmBlob> blobOld);

			Mat getAppMatrix(Mat frame, mmBlob blob);
			Mat getProbMatrix(Mat frame, mmBlob blob);

			vector<mmBlob> predictPosition(Mat frame, mmBlob blob, vector<mmBlob> tracks, vector<int> idxTracks);
			mmBlob propagateObject(Mat frame, Mat foreground, mmBlob track);

			vector<mmBlob> SM(Mat frame, Mat foreground, vector<mmBlob> blobVect, mmBlob blobU, vector<int> indexes);
		private:
			double alpha;
			double lambda;
			double sigma;
			double thresh;
			int totalFrameProcessed;

			double getPrgb(Mat frame, mmBlob track, Point p, Point pOld);
		};
		bool isFg(Mat foreground,Point p);
		vector<int> blobContained(vector<mmBlob> blobVect, Point p);
		double getDistFromCluster(Mat frame, Point p, vector<Point> clusterP);
	}
}
///////////////////////
#endif /* MMAPP_MODEL_H_ */

